URL=https://api.getastra.com/webhooks/integrations/ci-cd

ASTRA_SCAN_TYPE="${ASTRA_SCAN_TYPE:-lightning}"
ASTRA_JOB_EXIT_STRATEGY="${ASTRA_JOB_EXIT_STRATEGY:-always_pass}"
ASTRA_JOB_EXIT_REFETCH_INTERVAL="${ASTRA_JOB_EXIT_REFETCH_INTERVAL:-120}"
ASTRA_JOB_EXIT_REFETCH_MAX_RETRIES="${ASTRA_JOB_EXIT_REFETCH_MAX_RETRIES:-10}"

# Make the first API call
status_code=$(curl -s -o response.txt -w "%{http_code}" --user-agent "Astra Pentest Trigger Script/1.0" --header "Content-Type: application/json" --request POST --data "{\"accessToken\":\"$ASTRA_ACCESS_TOKEN\",\"projectId\":\"$ASTRA_PROJECT_ID\", \"mode\":\"$ASTRA_AUDIT_MODE\", \"automatedScanType\":\"$ASTRA_SCAN_TYPE\", \"jobExitStratgey\":\"$ASTRA_JOB_EXIT_STRATEGY\", \"jobExitCriterion\":\"$ASTRA_JOB_EXIT_CRITERION\", \"jobExitRefetchInterval\":\"$ASTRA_JOB_EXIT_REFETCH_INTERVAL\", \"jobExitPrefetchMaxRetries\":\"$ASTRA_JOB_EXIT_REFETCH_MAX_RETRIES\", \"targetScopeUri\":\"$ASTRA_TARGET_SCOPE_URI\"}" $URL)

# Check the status code of the first API call
if [[ "$status_code" == "200" ]]; then
  echo "âœ… Astra pentest was successfully started."
  cat response.txt
elif [[ "$status_code" == "422" ]]; then
  echo "ðŸŸ¡ Cannot start an audit, because an audit might be underway."
  cat response.txt
else
  echo "â›” Failed to start pentest."
  exit 1
fi

# Store the ID returned from the first API call
audit_id=$(jq -r '.auditId' response.txt)

# Define the URL for the second API call
scan_status_url="https://api.getastra.com/api/vapt/audits/$audit_id/cicd-scan-status"

# Loop for ASTRA_JOB_EXIT_REFETCH_MAX_RETRIES number of times
for ((retry=0; retry<ASTRA_JOB_EXIT_REFETCH_MAX_RETRIES; retry++)); do
  # Call the second API and store the response
  scan_status=$(curl -s -o scan_status_response.txt -w "%{http_code}" --user-agent "Astra Pentest Trigger Script/1.0" --header "Content-Type: application/json" --request GET $scan_status_url)

  # Parse the response to extract audit progress
  audit_progress=$(jq -r '.auditProgress' scan_status_response.txt)

  # Check if audit progress is 'reported'
  if [[ "$audit_progress" == "reported" ]]; then
    echo "âœ… Astra pentest completed successfully."
    exit 0
  fi

  # Check the HTTP status code
  if [[ "$scan_status" == "200" ]]; then
    # Parse the response to extract severity counts
    high_count=$(jq -r '.severityCount.high' scan_status_response.txt)
    critical_count=$(jq -r '.severityCount.critical' scan_status_response.txt)

    # Check if ASTRA_JOB_EXIT_STRATEGY is "always_pass"
    if [[ "$ASTRA_JOB_EXIT_STRATEGY" != "always_pass" ]]; then
      # Check if high or critical severity counts are greater than 0
      if [[ "$high_count" -gt 0 ]] || [[ "$critical_count" -gt 0 ]]; then
        echo "â›” High or critical severity issues found. Exiting..."
        exit 1
      fi
    fi

    echo "âœ… Scan status retrieved successfully. The scan is underway."
    cat scan_status_response.txt
  else
    echo "ðŸŸ¡ Failed to retrieve scan status. Retrying..."
  fi
  sleep $ASTRA_JOB_EXIT_REFETCH_INTERVAL  # Apply the interval after each retry
done

if [[ "$ASTRA_JOB_EXIT_STRATEGY" == "always_pass" ]]; then
  echo "âœ… Astra pentest completed successfully."
  exit 0
else
  echo "â›” Pentest failed."
  exit 1
fi
